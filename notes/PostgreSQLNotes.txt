PostgreSQL Notes

There is a DZone Refcard for this!

Installation
- on Mac
  * brew install postgresql
    or
    brew upgrade postgresql
- from source
  * download and unzip
  * cd to unzip directory
  * ./configure
  * make
  * sudo make install
- from a prebuilt binary
  * the installer creates a default user named "postgres" and
    prompts for a password to assign to the user during the install
    - you set the password to "postgres"
  * by default this installs in /Library/PostgreSQL/8.3
  * includes pgAdmin3 which is a GUI tool
    for working with Postgres databases
    (definitely use this!)
  * all the commands are in the bin directory below that directory
  * add "-Upostgres" to all commands to run as that user
  * it seems that the server is always running when installed this way

Initialize database
- need? sudo sysctl -w kern.sysv.shmmax=12582912
- need? sudo sysctl -w kern.sysv.shmall=12582912
- sudo mkdir /usr/local/pgsql
- sudo mkdir /usr/local/pgsql/data
- sudo chown Mark /usr/local/pgsql
- sudo chown Mark /usr/local/pgsql/data
- all the commands are in /usr/local/pqsel/bin
- initdb -D /usr/local/pgsql/data

Version 9.2.1 notes
- to start server
  * pg_ctl -D /usr/local/pgsql/data start
    - will continue running
- to stop server
  * pg_ctl -D /usr/local/var/postgres stop -m fast
- to create a database
  * createdb {db-name}
- to delete a database
  * dropdb {db-name}
- to list existing databases
  * psql -l
- interactive mode
  - to start for a given database
    * psql -d {db-name}
  - to list tables
    * \d
  - to execute a query
    * select * from foo where bar = 'baz';
    * don't forget the semicolon at the end!
  - to quit
    * \q
- to execute SQL statements in a file
  * psql -d {db-name} -f {file-path}
- to execute a single SQL statement
  * psql -d {db-name} -c '{stmt}'
    - ex. psql -d bmx-demo -c 'select * from states'

Column types

- boolean or bool
- char(n)
- varchar(n)
- text    
- smallint
- int
- serial (for autoincrement)
- float(n)
- real or float8
- numeric or numeric(p, s) where
  p is the total number of digits and
  s is the number after the decimal point
- date 
- time
- timestamp
- timestamptz - a timezone-aware timestamp
- interval - a period of time
- array
  - ex. an array of int values is int[]
- json - text
- jsonb - binary  
- uuid
- for geometric data: box, line, point, lseg, polygon
- inet
- macaddr

To start interactive mode
- psql -U{username} {database-name}
  * username can be "postgres"

To make the "postgres" user able to create tables
- psql -d some-database
- \password postgres
- Enter new password like "postgres".
- alter role postgres with superuser;
- alter role postgres with createdb;
- ctrl-d

To create a user/role
- createuser
  * will prompt for name of role to add and
    whether the role should be a superuser

To change the password of a user
- psql -Upostgres -dtemplate1
- alter user {username} with password '{new-password}';
- \q

To start the database server
- postgres -D /usr/local/pgsql/data >logfile 2>&1 &

To create a database
- createdb -U{username} {db-name}

To create a table
- create table {table-name} ({col-name} {col-type}, ...);
  * for example (user is a reserved table),
    create table user2 (
      id bigserial primary key,
      username text,
      password text
    );

To delete a database
- dropdb -U{username} {db-name}

To use a database in interactive mode
- psql -U{username} {db-name}
  * for example, XAdemo

To list all the public (non-system) tables
- select * from pg_tables where schemaname='public';

More on interactive mode
- prompt
  * begins with the database name
  * ends in =# if you are the database superuser, otherwise ends in =>
- see schemas that will be searched - show search_path;
- change schemas that will be searched -
  set search_path to {comma-separated-schema-list}
  * for example, set search_path=sal;
- help - \? or \h{command}
- include - \i{file}
  * reads SQL from the given file
- list all databases - \l
- list public tables - \d or \z
- list system tables - \dS
  * for example, the system table pg_tables
- list columns in a table - \d {table-name}
- version
  * to see version of PostgreSQL, enter "select version();"
- exit - \q
- see http://www.postgresql.org/docs/6.4/static/app-psql.htm for more

Run a single command
- psql {db-name} {username} -c {query}

Run commands in a file
- psql -d {db-name} -U{username} -f {file}

Auto-incrementing keys
- approach #1
  CREATE TABLE foo (
    id SERIAL PRIMARY KEY,
    ... other columns ...
  )
- approach #2
  CREATE SEQUENCE fooSeq;
  CREATE TABLE foo (
    id INTEGER NOT NULL PRIMARY KEY DEFAULT nextval('fooSeq'),
    ... other columns ...
  )

JDBC
- if prebuilt binary installer was used
  then JDBC driver JAR files are in /Library/PostgreSQL/pgJDBC
- download a driver from http://jdbc.postgresql.org/
  * you have successfully used postgresql-8.2-504.jdbc3.jar
  * the name of the driver class is org.postgresql.Driver
- by default, listens on port 5432
- connection URLs have the format
  jdbc:postgresql://{host}:{port}/{database-name}
- to set the schema from code,
  stmt.execute("set search_path = {schema-name};");

To dump the database to a file:
- from a terminal window
  * pg_dump -Upostgres {dbname} > {outfile}
    - postgres password is postgres
  * outfile will contain all SQL commands necessary to
    recreate the database in its current state
  * to recreate the database elsewhere
    - use dropdb to delete the previous database
      (see "To delete a database")
    - use createdb to recreate an empty database
      (see "To create a database")
    - use psql to run the commands in outfile
      (see "Run commands in a file")
- from pgAdmin III
  * right-click a table name
  * select "Backup..."
  * press "..." to specify the file where it will be saved
  * select "PLAIN"
  * select "Only data"
  * press "OK"
  * press "Done"
