CSS Grid Layout

Resources
- Grid Garden (similar to FlexBox Froggy) - https://cssgridgarden.com/
- https://css-tricks.com/snippets/css/complete-guide-grid/
- free Wes Bos course https://cssgrid.io/
- free CSS Grid Builder tool at https://www.coffeecup.com

Overview
- for the most part grid can do everything flexbox can do
- while it may seem that grid is for 2D layouts
  and flexbox is for 1D, grid does fine with 1D also
- many flexbox properties can be transitioned, but currently
  the only grid property that can do this is grid-gap
- flexbox can support having variable width items on each row,
  but grid can only approximate this using span

Browser support
- no support in IE10 or earlier
- IE11 only supports an older version of the spec.
- support is good in Chrome, Edge, Firefox, Safari,
  iOS Safari, and the common Android browsers

To tell a container to use grid layout
- display: grid
- causes direct children to become "grid items"
- children can also use grid layout
  by setting their display to grid

To specify spacing between all cells
- grid-gap: 10px
- there is no counterpart to this in flexbox
  * using margins isn't a good alternative
    because different margins would be needed
    for first and last items

To specify number of columns and size of each:
- grid-template-columns: 100px 200px 150px
  * three columns of varying sizes
  * using percentages doesn't work well
    because they don't consider grid-gap
  * "fr" (fractional) units do consider grid-gap
    - ex. 1fr to take all the remaining space
      after specified widths and gaps are accounted for
    - 1fr 2fr 1fr gives three columns
      where the free space is distributed between them
      using the numbers are weights
    - can use for column widths and row heights
  * value "auto"
    - means use maximum content size in a column or row
    - smaller elements are expanded to fit the cell size
  * value repeat(3, 150px)
    - creates three columns that are each 150px wide
  * value repeat(3, 1fr)
    - creates three columns that are equally sized to fill the width
  * rows are created automatically
  * can name grid lines by preceding sizes with [name]

To specify number of rows and size of each:
- grid-template-rows: 100px 200px 150px
  * if grid-template-columns is not specified,
    the number of columns defaults to 1
  * can name grid lines by preceding sizes with [name]
- if there are more items than will fit
  in the specified columns and rows,
  the specified row sizes will repeat to accommodate them
- to specify another size for any implicit rows, add
  grid-auto-rows: {some-height}
  * can specify multiple heights to cycle through

To specify columns and rows in a single property:
- grid-template: {cols} / {rows}
  where {cols} is the values for grid-template-columns
  and {rows} is the values for grid-template-rows

Extra items
- by default are placed on implicit rows
- to switch to use implicit columns,
  grid-auto-flow: column
  * defaults to row
  * similar to flexbox flex-direction
  * when this is set, can specify
    grid-auto-columns: {some-width}
    - can specify multiple widths to cycle through
- when the next item to layout doesn't fit
  in the current row (when flow is row)
  or the current column (when flow is column)
  the remaining cells in that row/column are left empty
- to avoid this and use following items to fill all areas
  switch to "dense" layout with
  grid-auto-flow: dense
  * allows elements to be laid out in a slightly different order

Tracks
- columns and rows are also referred to as "tracks"
- ones specified by you are "explicit"
- ones not specified by you are "implicit"

Row heights
- default to largest content height in any cell in each row
- setting a height on the container changes this
  * set height to 100vh to use full height

repeat function
- instead of "20px 20px 20px", can write "repeat(3, 20px)"
- can use with any units (such as fr)
- repeat(2, 20px 40px) is the same as 20px 40px 20px 40px
- repeat can be used anywhere an individual size can be used

Spanning
- to make an item span multiple columns, add to CSS of item
  grid-column: {start} / span {n}
- to make an item span multiple rows, add to CSS of item
  grid-row: {start} / span {n}

Placing Items
- add to CSS of item
  grid-column-start: {col1}
  grid-column-end: {col2} /* alternative to specifying span */
  * previous two lines can be replaced by
    grid-column: {col1} / {col2}
    or
    grid-column {col1} / span {col2 - col1 + 1}
  grid-row-start: {row1}
  grid-row-end: {row2} /* alternative to specifying span */
  * previous two lines can be replaced by
    grid-row: {row1} / {row2}
    or
    grid-row {row1} / span {row2 - row1 + 1}
- negative values count from end where -1 is the last
  * to span to last column or row
    grid-column: {start-col} / -1;
    - only works if an explicit number of columns is specified
    - otherwise just uses one column
    grid-row: {start-row} / -1;
    - only works if an explicit number of rows is specified
    - otherwise just uses one row
- can use grid line names in place of column and row numbers

- auto-fill fits as many cells as possible
  * ex. grid-template-columns: repeat(auto-fill, 200px);
    fits as many columns as will fit in the container
    when each has a width of 200px
  * adds extra explicit columns if they will fit
  * doesn't expand items to fill available space
  * resizing the window will reflow the items

- auto-fit is similar to auto-fill
  * doesn't add extra explicit columns
    even if they would fit
  * expands items to fill available space
  * resizing the window will reflow the items

- minmax function
  * can be used for a column width or row height
  * specifies a minimum and maximum size
  * ex. grid-template-column: repeat(auto-fit, minmax(200px, 1fr));
    - fits as many as possible with a minimum width of 200px each
      and flows to additional rows if needed
    - if all will fit on one row,
      each is as wide a possible to fill the row

- fit-content function
  * can be used for a column width or row height
  * like auto, but sets a maximum size
  * ex. grid-template-column: fit-content(200px) 300px;

- grid template areas
  * give names to areas using grid-template-areas
  * to see areas in Firefox Developer Edition,
    - open dev tools
    - select Inspector...Layout
    - under "Overlay Grid", check box next to container
    - under "Grid Display Settings" check
      "Display line numbers" and "Display area names"
  * place specific elements in named areas with grid-area
    - ex.
      #left-nav {
        grid-area: left-nav
      }
  * ex. HTML
    <div id="container">
      <header>My Header</header>
      <nav id="left-nav">My Left Nav</nav>
      <section id="center">My Content</section>
      <nav id="right-nav">My Right Nav</nav>
      <footer>My Footer</footer>
    </div>
  * ex. CSS
    .container {
      display: grid;
      height: 100vh;
      grid-template-columns: 300px 1fr 200px
      grid-template-rows: 100px 1fr 50px
      grid-template-areas:
        "header header header"
        "left-nav center right-nav"
        "footer footer footer"
    }
    - header and footer both span three columns
    - note no commas between the area strings
  * use a period instead of an area name to leave an area empty
  * can use media queries to have a different layout
    for different display sizes
    - specify different grid-template-areas for each

Aligning items
- use these six properties:
  * justify-items, justify-content, justify-self
    - always affect rows (horizontal),
      regardless of grid-auto-flow direction unlike in flexbox
  * align-items, align-content, align-self
    - always affect columns (vertical),
      regardless of grid-auto-flow direction unlike in flexbox
- justify-items on container
  * stretch (default) - stretches item across cell
  * center - centers item horizontally in cell
    - can use for simple centering with only one column and row
    - ex.
      display: grid;
      justify-items: center;
      align-items: center;
  * start - left-justified
  * end - right-justified
- align-items on container
  * same as justify-items, but affects vertical alignment
  * won't have any effect unless row has a height
- centering
  * since default for justify-items and align-items is stretch,
    it centers by default
- place-items on container
  * combines justify-items and align-items
    so takes two values in that order
  * browser support may be suspect
- justify-content on container
  * affects placement of cells on the row
  * start (default) - left-justified
  * center
  * end - right-justified
  * space-between - distributes excess space evenly
    with no space before first or after last
  * space-around - same as space-between but adds
    half of calculated spacing before first and after last
    - less commonly used than space-between
- align-content on container
  * same as justify-content, but affects vertical alignment
  * won't have any effect unless row has a height
- is there a place-content property?
- justify-self on an item
  * same as justify-items, but only applies to specified items
  * not available for flexbox
- align-self on an item
  * same as align-items, but only applies to specified items
  * is available for flexbox

Order
- all items have an order value of 0 by default
  which causes them to be laid out in the order they appear
- change the order of an item with
  order: n
- higher numbers appear after lower
  so 1 comes after all the default 0's
- avoid using since screen readers don't honor this
  (at least currently)
