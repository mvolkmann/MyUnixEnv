_HiStOrY_V2_
phrase(player(Name,\040Number),\040`Player\040Gretzky\040wears\040number\04099.`).
set_prolog_flag(double_quotes,\040string).
phrase(xs,\040X).
phrase(ys,\040X).
phrase(ys,\040`yyy`).
phrase(xs,\040`xxx`).
phrase((...,\040[Last]),\040`xyz`).
phrase((...,\040"y",\040...),\040`xyz`).
phrase((...,\040"ar",\040...),\040`Mark`).
phrase((...,\040[X,\040X],\040...),\040`Mississippi`).
grandfather(richard,\040X).
findall(grandfather(richard,\040X),\040L).
findall(X,\040grandfather(richard,\040X),\040L).
listing.
listing(file_search_path).
listing(listing).
listing.
retract(grandfather).
listing(grandfather).
listing(grandfather/2).
dynamic(grandfather).
dynamic(grandfather/2).
dynamic(father/2).
father(richard,\040X).
asserta(father(richard,\040laura)).
father(richard,\040X).
asserta(father(richard,\040pam)).
father(richard,\040X).
dynamic(father/2).
asserta(father(richard,\040laura)).
assertz(father(richard,\040pam)).
father(richard,\040X).
retract(father(richard,\040mark)).
father(richard,\040X).
retractall(father(richard,\040_)).
father(richard,\040X).
[family].
father(X).
father(X,\040Y).
consult(family).
father(X,\040Y).
consult(./family.pl).
consult(family.pl).
consult('./family.pl').
phrase(player(Name,\040Number),\040"Player\040Gretzky\040wears\040number\04099.").
phrase(player(Name,\040Number),\040`Player\040Gretzky\040wears\040number\04099.`).
phrase(player(Name,\040Number),\040"Player\040Gretzky\040wears\040number\04099.").
set_prolog_flag(double_quotes,\040chars).
phrase(player(Name,\040Number),\040"Player\040Gretzky\040wears\040number\04099.").
phrase(hello(Name),\040"Hello,\040World!").
phrase(player(Name,\040Number),\040"Player\040Gretzky\040wears\040number\04099.").
(\040grandfather(richard,\040jeremy)\040->\040write("yes");\040write("no")\040).
(\040grandfather(richard,\040mark)\040->\040write("yes");\040write("no")\040).
(\040grandfather(richard,\040mark),\040write("yes");\040write("no")\040).
(\040grandfather(richard,\040amanda),\040write("yes");\040write("no")\040).
X\040in\0405..10,\040Y\040in\0407..14,\040X\040#>\040Y.
X\040in\0405..10,\040Y\040in\0407..14,\040X\040#>\040Y,\040label([X,Y]).
X\040in\0405..10,\040Y\040in\0407..14,\040X\040#>\040Y,\040label([X,\040Y])/\040.
X\040in\0405..10,\040Y\040in\0407..14,\040X\040#>\040Y,\040label([X,\040Y]).
X\040=\0403,\040R\040=\0402..7,\040X\040in\040R.
X\040=\0408,\040R\040=\0402..7,\040X\040in\040R.
Value\040=\0408,\040Range\040=\0402..7,\040Value\040in\040Range.
Value\040=\0402,\040Range\040=\0402..7,\040Value\040in\040Range.
Value\040=\0407,\040Range\040=\0402..7,\040Value\040in\040Range.
Values\040=\040[3,\0404,\0407],\040Range\040=\0402..7,\040Values\040ins\040Range.
Values\040=\040[3,\0408,\0407],\040Range\040=\0402..7,\040Values\040ins\040Range.
Values\040=\040[2,\0405,\0402],\040all_distinct(Values).
Values\040=\040[2,\0405,\0403],\040all_distinct(Values).
Vs\040=\040[2,\0402,\0402,\0403,\0404,\0404],\040global_cardinality(Vs,\040[2-3,\0403-1,\0404-2]).
Vs\040=\040[2,\0402,\0402,\0403,\0404,\0404],\040global_cardinality(Vs,\040[2-3,\0403-1,\0404-1]).
Vs\040=\040[2,\0402,\0402,\0403,\0404,\0404],\040global_cardinality(Vs,\040[2-3,\0403-1,\0404-2]).
Vs\040=\040[2,\0404,\0402,\0402,\0403,\0404],\040global_cardinality(Vs,\040[2-3,\0403-1,\0404-2]).
Vs\040=\040[2,\0404,\0402,\0403,\0402,\0404],\040global_cardinality(Vs,\040[2-3,\0403-1,\0404-2]).
help(sup).
help(inf).
help(if_).
run.
eval(+,\040R).
is_father(X).
is_son(X).
sister(X,\040Y).
sister(amanda,\040Y).
sibling(X,\040Y).
father(X,\040Y).
mother(X,\040Y).
sibling(amanda,\040jeremy).
sibling(jeremy,\040amanda).
sibling(amanda,\040X).
sibling(X,\040Y).
sister(amanda,\040jeremy).
sister(amanda,\040X).
help(false).
help(true).
help(false).
help(fail).
help(true).
predicate(true).
is_predicate(true).
atom(true).
help(catch).
