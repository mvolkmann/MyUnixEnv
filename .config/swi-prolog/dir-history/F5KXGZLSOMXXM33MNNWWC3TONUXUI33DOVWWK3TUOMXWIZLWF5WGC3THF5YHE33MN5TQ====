_HiStOrY_V2_
retractall(likes(_,\040_)).
likes(mark,\040X).
[lists].
prepend(1,\040[2,\0403],\040X).
L\040=\040[2,\0403],\040prepend(1,\040L,\040X).
[lists].
L\040=\040[2,\0403],\040prepend(1,\040L,\040X).
[iteration].
map([1,\0402,\0403],\040X).
[main].
main().
main.
main(X).
[main].
main(X).
[main].
main(X).
[main].
main(X).
[main].
main(X).
[main].
main(X).
[main].
main(X).
[main].
main(X).
[main].
main(X).
[main].
main(X).
[main].
main(X).
[main].
main(X).
[main].
main(X).
[main].
main(X).
maplist(double,\040[1,\0402,\0403],\040X).
[lists].
maplist(double,\040[1,\0402,\0403,\0404],\040X).
[lists].
maplist(double,\040[1,\0402,\0403,\0404],\040X).
[lists].
maplist(double,\040[1,\0402,\0403,\0404],\040X).
maplist(isOdd,\040[1,\0402,\0403,\0404],\040X).
isOdd(5,\040X).
5\040mod\0402.
R\040is\0405\040mod\0402.
R\040is\0406\040mod\0402.
R\040is\0406\040mod\0402\040=:=\0400.
R\040is\0406\040mod\0402\040=\0400.
R\040is\0406\040mod\0402\040==\0400.
[lists].
isEven(7).
isEven(6).
maplist(isOdd,\040[1,\0402,\0403,\0404],\040X).
isEven(6).
[lists].
[strings].
appendStrings('first\040',\040'second',\040X).
[exercise1-3].
['exercise1-3'].
[exercise1_3].
grandfather_of(clarence,\040jeremy).
is_father(clarence).
[exercise1_3].
grandfather_of(clarence,\040jeremy).
grandfather_of(richard,\040jeremy).
[exercise1_3].
[test].
[exercise1_3].
load_test_files('test').
run_tests.
[exercise1_3].
load_test_files('test').
run_tests.
divide(6,\0402,\0403).
[math].
divide(6,\0402,\0403).
make.
divide(6,\0402,\0403).
divide(6,\0402,\040X).
make.
divide(6,\0402,\0403).
divide(6,\0402,\040X).
divide(6,\040X,\0403).
6\040/\0402\040=\0403.
6\040/\0402\040=:=\0403.
6\040/\0402\040=:=\0404.
6\040/\0402\040=:=\040X.
6\040/\0402\040=\040X.
6\040/\040X\040=\0403.
halt.
consult('./prolog-examples/family.pl').
father(X,Y).
consult("./prolog-examples/family.pl").
father(X,Y).
["./prolog-examples/family.pl"].
